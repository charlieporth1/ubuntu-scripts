#!/usr/bin/parallel -j+32 --shebang-wrap --pipe /bin/bash
COL_LIGHT_GREEN='\e[1;32m'
COL_LIGHT_RED='\e[1;31m'
COL_NC='\e[0m' # No Color

#weather(){ curl -s "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=${@:-<YOURZIPORLOCATION>}"|perl -ne '/<title>([^<]+)/&&printf "%s: ",$1;/<fcttext>([^<]+)/&&print $1,"\n"';}
weather(){ curl -s "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=${@:-<edina>}"|perl -ne '/<title>([^<]+)/&&printf "%s: ",$1;/<fcttext>([^<]+)/&&print $1,"\n"';}
function mvb(){
c=1; d=1; mkdir -p dir_${d}

for file in *
do
        if [ $c -eq 3001 ]
        then
                d=$(( d + 1 )); c=0; mkdir -p dir_${d}
        fi
        mv "$file" dir_${d}/
        c=$(( c + 1 ))
done
}

extract () {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else

      echo "'$1' is not a valid file!"
   fi
 }

#move and go to dir
mvg (){
  if [ -d "$2" ];then
    mv $1 $2 && cd $2
  else
    mv $1 $2
  fi
}



#copy and go to dir
cpg (){
  if [ -d "$2" ];then
    cp $1 $2 && cd $2
  else
    cp $1 $2
  fi
}




function cdn(){ for i in `seq $1`; do cd ..; done;}
#if false



function batterylife() {
  printf ' Battery Life: ' && ioreg -l | grep -i capacity | tr '\n' ' | ' | awk '{ printf("%.2f%%", $10/$5 * 100) }' && echo ""
}
function watchhttp() {
	sudo tcpdump -i en0 -n -s 0 -w - | grep -a -o -E "Host\: .*|GET \/.*"
}
# Tar up folder
function tarup() {
	tar -zcvf $1
}

# Search Replace
function sr() {
	sed -i "" s/$1/$2/g $3
}
# Checks port number to see what service is attached
function port2service() {
	lsof -i -P | grep $1
}

function mk() {
	mkdir -p "$@" && cd "$@"
}
# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}
# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}



ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string

#   spotlight: Search for a file using MacOS Spotlight's metadata
#   -----------------------------------------------------------
    spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }


#   ---------------------------
#   5.  PROCESS MANAGEMENT
#   ---------------------------

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
    findPid () { lsof -t -c "$@" ; }


myinfo () {
  printf "CPU: "
  cat /proc/cpuinfo | grep "model name" | head -1 | awk '{ for (i = 4; i <= NF; i++) printf "%s ", $i }'
  printf "\n"

  cat /etc/issue | awk '{ printf "OS: %s %s %s %s | " , $1 , $2 , $3 , $4 }'
  uname -a | awk '{ printf "Kernel: %s " , $3 }'
  uname -m | awk '{ printf "%s | " , $1 }'
  kded4 --version | grep "KDE Development Platform" | awk '{ printf "KDE: %s", $4 }'
  printf "\n"
  uptime | awk '{ printf "Uptime: %s %s %s", $3, $4, $5 }' | sed 's/,//g'
  printf "\n"
  cputemp | head -1 | awk '{ printf "%s %s %s\n", $1, $2, $3 }'
  cputemp | tail -1 | awk '{ printf "%s %s %s\n", $1, $2, $3 }'
  #cputemp | awk '{ printf "%s %s", $1 $2 }'
}

function kernel-current-version {
   major=$(uname -r | awk -F '.' '{print $1}')
   minor=$(uname -r | awk -F '.' '{print $2}')
   if [ $(uname -r | grep rc) ]; then
      rc="rc$(uname -r | awk -F '-' '{print $2}' | awk -F 'rc' '{print $2}')"
      echo "$major.$minor-$rc"
   else
      echo "$major.$minor"
   fi
}
function kernel-latest-version {
   kernel=$(lynx -dump http://kernel.ubuntu.com/~kernel-ppa/mainline/ | tail -1 | cut -d ' ' -f 3)
   major=$(echo $kernel | awk -F '/' '{print $6}' | awk -F '-' '{print $1}' | cut -c 2-)
   if [ $(uname -r | grep rc) ]; then
      minor=$(echo $kernel | awk -F '/' '{print $6}' | awk -F '-' '{print $2}')
      echo "$major-$minor"
   else
      echo $major
   fi
}


function cpuinfo1 {
   cores=$(nproc)
   frequency=$(grep MHz /proc/cpuinfo | head -1 | awk -F ' ' '{print $4" MHz"}')
   model=$(grep "model name" /proc/cpuinfo | head -1 | sed -r 's/^.{13}//')
   echo "CPU Model: $model"
   echo "CPU Cores: $cores"
   echo "Frequency: $frequency"
}

function google-image-search {
   input=$(zenity --entry --title="Google Image Searcher")
   search=$(echo $input | sed 's/ /+/g')
 
   if [ "$input" == "" ]; then
      exit
   else
      xdg-open "http://images.google.com/images?q=$search&tbm=isch&tbs=isz:l"
   fi
}

function amazon-search {
   search=$(zenity --entry --title="Amazon Search")
 
   if [ "$input" == "" ]; then
      exit
   else
      xdg-open "http://www.amazon.com/s/field-keywords=$search"
   fi
}

# Usage: die <msg(s)>
function die () { echo "$@" >&2; exit 1; }

# .bash_functions - User bash functions

# Template from https://gist.github.com/bretonics/894d8c2d1d4813c36b7d36e9a97aedd6

#-------------------------------------------------------------------------------
# System
mkcd() {
    mkdir "$1"
    cd "$1"
}


#      __                  _   _
#     / _|_   _ _ __   ___| |_(_) ___  _ __  ___
#    | |_| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
#    |  _| |_| | | | | (__| |_| | (_) | | | \__ \
#    |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#
#  ▓▓▓▓▓▓▓▓▓▓
# ░▓ author ▓ cirrus <cirrus@archlinux.info>
# ░▓ code   ▓ https://gist.github.com/cirrusUK
# ░▓ mirror ▓ http://cirrus.turtil.net
# ░▓▓▓▓▓▓▓▓▓▓
# ░░░░░░░░░░

## WIKIPEDIA SEARCH FUNCTION ##
wikipediaSearch() {
echo -n -e "\n============================================\n\tWelcome to WikiPedia Search"; echo ""; i=1 ; for line in $(lynx 
--dump "http://en.wikipedia.org/w/index.php?title=Special%3ASearch&profile=default&search=$1&fulltext=Search" | grep 
http://en.wikipedia.org/wiki | cut -c7-); do echo $i $line; lines[$i]=$line ;  i=$(($i+1)); done ; echo -n -e 
"\n============================================\n\tPlease select the link to open - "; read answer; w3m ${lines[$answer]}
}
# YouTube search bash function  | Usage: videos <foo>
videos() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "http://www.youtube.com/results?search_query=$search"
}
# DuckDuckGo search bash function  | Usage: ddg <foo>
ddg() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "http://duckduckgo.com/?q=$search"
}

# Wikipedia English search bash function   | Usage: wiki <foo>
wiki() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "http://en.wikipedia.org/w/index.php?search=$search"
}

# Android Play Store search bash function | Usage: android <foo>
android() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "http://play.google.com/store/search?q=$search"
}
# StackOverflow bash search function  | Usage: so <foo>
so() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    w3m "http://stackoverflow.com/search?q=$search"
}
#encrypt <file> | Usage encrypt <file>
function encrypt() {
        [ -e "$1" ] || return 1
        openssl des3 -salt -in "$1" -out "$1.$CRYPT_EXT"
        [ -e "$1.$CRYPT_EXT" ] && shred -u "$1"
}

#decrypt <file.> | Usage decrypt <file.>
function decrypt() {
        [ -e "$1" ] || return 1
        [ "${1%.$CRYPT_EXT}" != "$1" ] || return 2
        openssl des3 -d -salt -in $1 -out ${1%.$CRYPT_EXT}
        [ -e "${1%.$CRYPT_EXT}" ] && rm -f "$1"
}
#URL Shortener  | Usage : short <url>
short() {
  curl -F"shorten=$*" https://0x0.st
}

#
# moves file to ~/.Trash
# (use instead of rm)
#
ttrash() {
   if [ $# -eq 0 ]
   then
       echo Usage: trash FILE...
       return 1
   fi
   local DATE=$(date +%Y%m%d)
   [ -d "${HOME}/.Trash/${DATE}" ] || mkdir -p ${HOME}/.Trash/${DATE}
   for FILE in "$@" 
   do
     mv "${FILE}" "${HOME}/.Trash/${DATE}"
     echo "${FILE} trashed!"   
   done
}
#
# Swap two files
#
swap(){
    if [ $# -ne 2 ]
    then
        echo Usage: swap file1 file2
        return 1
    fi
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}
###################
# Common bash functions
#
# Code derived from various sources. 
# Use at your own risks!
#
###################

# Text formatting
e_bold () { echo -e "\e[1m$1\e[0m"; }
e_underline () { echo -e "\e[4m$1\e[0m"; }
e_reverse () { echo -e "\e[7m$1\e[0m"; }

bold () { return "\e[1m$1\e[0m"; }
underline () { return "\e[4m$1\e[0m"; }
reverse () { return "\e[7m$1\e[0m"; }

# Remove "<none>:<none>" images left from old 'docker build' results
function docker-clean-images {   
    docker images | while read line; do
        REPOSITORY=$(echo $line | awk '{print $1}')
        TAG=$(echo $line | awk '{print $2}')
        ID=$(echo $line | awk '{print $3}')

        if [ "$REPOSITORY" == "<none>" ] && [ "$TAG" == "<none>" ]; then
            docker rmi -f $ID
        fi
    done
}

# Backup data volumes into volume_name.tgz archives (depends on alpine:latest)
function docker-volume-backup {
    [ $# -eq 0 ] && echo "Usage: docker-volume-backup volume ..." && return 1

    if [ $# -gt 1 ]; then
        for volume in $@; do
            docker-volume-backup "$volume"
        done
        return 0
    fi

    VOLUME="$1"
    IMAGE="$VOLUME.tgz"

    if ! docker volume ls | grep -q "$VOLUME"; then
        echo "$VOLUME: volume not found"; return 1
    fi

    docker run -it --rm -v "$VOLUME:/src" -v "$(pwd):/dest" alpine sh -c "cd /src; tar -czvf /dest/$IMAGE ./"
}

# Restore backed up volumes from volume_name.tgz archives (depends on alpine:latest)
# Warnings:
#  * Already existing volume with these names will be overwritten
#  * Archives should be placed in the current directory
function docker-volume-restore {
    [ $# -eq 0 ] && echo "Usage: docker-volume-restore volume ..." && return 1

    if [ $# -gt 1 ]; then
        for volume in $@; do
            docker-volume-restore "$volume"
        done
        return 0
    fi

    VOLUME="$1"
    IMAGE="$VOLUME.tgz"

    [ ! -e "$IMAGE" ] && echo "$IMAGE: file not found" && return 1

    if docker volume ls | grep -q "$VOLUME"; then
        docker volume rm "$VOLUME" || return 1
    fi
    docker volume create --name "$VOLUME" || return 1
    docker run -it --rm -v "$(pwd):/src" -v "$VOLUME:/dest" alpine sh -c "cd /dest; tar -xzvf /src/$IMAGE"
}

ListAndroidSYSFS () { find -L /sys/bus/usb/devices -maxdepth 2 -path "*/modalias" -printf "%h\t" -exec cat {} \; | awk -F: 
'/icFFisc42ip0/ {print $1}' | sort -u
}

ListAndroidSYSFSderef () { ListAndroidSYSFS | xargs -i readlink -f {} | sort -u
}

ListAndroidSerials () { ListAndroidSYSFS | xargs -i cat {}/serial | sort -u
}

ListAndroidVendorIDs () { ListAndroidSYSFS | xargs -i cat {}/idVendor | awk '{printf "0x%s\n", $1}' | sort -u
}

ListAndroidUSBDevices () { ListAndroidSYSFS | xargs -i cat {}/busnum {}/devnum | awk '{printf "/%03d", $1}' | sed -e 
's#.\{8\}#/dev/bus/usb&\n#g' | sort -u
}

ListAdbUsbIni () { cat ~/.android/adb_usb.ini | grep '^0x[0-9a-fA-F]\{4\}$' | tr A-F a-f | sort -u
}

UpdateAdbUsbIni () { local VENDOR_IDS="$(ListAdbUsbIni)\n$(ListAndroidVendorIDs)"; echo -e "$VENDOR_IDS" | sort -u > ~/.android/adb_usb.ini
}

ADBShell () { adb ${2+-s} $2 shell "$1" | tr -d '\r'
}

ADBServicePackageName () { ADBShell "service list" $2 | sed 's/^[0-9]\{1,3\}\t\([^:]*\): \[\([^]]*\)\].*/\1 \2/' | awk '/^'$1' / 
{print $2}' | head -n 1
}

ADBPMListPackages () { ADBShell "pm list packages" $1 | awk -F: '/^package:/{print $2} '
}

# Add these functions to your ~/.bashrc file.

function mktunnel {
    if [[ $* == '' ]] || [[ $1 == '-h' ]]; then
                echo 'Usage: mktunnel LOCALPORT REMOTEPORT REMOTEHOST'
        else
                ssh -fCNL $1:localhost:$2 $3;
        fi
}

function lstunnel { 
    if [[ $1 == '-h' ]]; then
                echo 'Usage: lstunnel [REGEX]'
        else
                count=1
                pgrep -fl "ssh -fCNL $*" | cut -f2- -d ' ' | while read LINE; do
                    echo $count: $LINE;
                    count=`expr $count + 1`;
                done
        fi      
}

function rmtunnel {
    if [[ $* == '' ]] || [[ $1 == '-h' ]]; then
                echo 'Usage: rmtunnel N [REGEX]'
        else
                count=1
                pgrep -f "ssh -fCNL $2" | while read LINE; do
                    if [[ $1 == $count ]]; then
                                kill -9 $LINE;
                                break
                        fi
                        count=`expr $count + 1`;
                done
        fi
}

function lsdping () {
#if [$1 == $1 ];then
ping $1 $2 $3 $4 $5 $6 $7 $8 $9 |lolcat

#fi
}
show_ascii_berry() {
  echo -e "
        ${COL_LIGHT_GREEN}.;;,.
        .ccccc:,.
         :cccclll:.      ..,,
          :ccccclll.   ;ooodc
           'ccll:;ll .oooodc
             .;cll.;;looo:.
                 ${COL_LIGHT_RED}.. ','.
                .',,,,,,'.
              .',,,,,,,,,,.
            .',,,,,,,,,,,,....
          ....''',,,,,,,'.......
        .........  ....  .........
        ..........      ..........
        ..........      ..........
        .........  ....  .........
          ........,,,,,,,'......
            ....',,,,,,,,,,,,.
               .',,,,,,,,,'.
                .',,,,,,'.
                  ..'''.${COL_NC}"
}
function validphone () {
    case ${1//[ -]/} in
     *[!0-9]* | 0* | ???????????* | \
     ????????? | ???????? | ??????? | ?????? | ????? | ???? | ??? | ?? | ? | '')
        return 1 ;;  # Return failure
     *) return 0 ;;  # Success
    esac
}
function valid_ip() {
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

function jb() {       
figlet "Welcome 007"
PS1='007:+($debian_chroot)}\u@\h:\w\\$ '
}
function MacGyver() {       
figlet "Welcome Agus MacGyver"
PS1='AgusMacGyver:+($debian_chroot)}\u@\h:\w\\$ '
}
function MrRobot() {       
figlet "Welcome Agus Mr. Robot"
PS1='MrRobot:+($debian_chroot)}\u@\h:\w\\$ '
}       
function FBI() {
figlet "Welcoome FBI SHELL"
PS1='FBI:+($debian_chroot)}\u@\h:\w\\$ '
}
function CIA() {
figlet "Welcoome CIA SHELL"
PS1='CIA:+($debian_chroot)}\u@\h:\w\\$ '
}
function NSA() {
figlet "Welcoome NSA SHELL"
PS1='NSA:+($debian_chroot)}\u@\h:\w\\$ '
}
function DoD() {
figlet "Welcoome DoD SHELL"
PS1='DoD:+($debian_chroot)}\u@\h:\w\\$ '
}
function USAF() {
figlet "Welcoome USAF SHELL"
PS1='USAF:+($debian_chroot)}\u@\h:\w\\$ '
}
function USNAVY() {
figlet "Welcoome US Navy SHELL"
PS1='USNavy:+($debian_chroot)}\u@\h:\w\\$ '
}
function USNG() {
figlet "Welcoome US Natinal Gaurd SHELL"
PS1='USNG:+($debian_chroot)}\u@\h:\w\\$ '
}
function USMC(){
figlet "Welcoome USMC SHELL"
PS1='USMC:+($debian_chroot)}\u@\h:\w\\$ '
}
function US_A() {
figlet "Welcoome US Army SHELL"
PS1='USArmy:+($debian_chroot)}\u@\h:\w\\$ '
}
function MNNG() {
figlet "Welcoome US MN NG SHELL"
PS1='USMNNG:+($debian_chroot)}\u@\h:\w\\$ '
}
function USM() {
figlet "Welcoome US Marchels SHELL"
PS1='USM:+($debian_chroot)}\u@\h:\w\\$ '
}
function CIAC() {
figlet "Welcoome Charlie to the CIA computer network"
PS1='CIA:+($debian_chroot)}\u@\h:\w\\$ '
}
function FBIC() {
figlet "Welcoome Charlie to the FBI computer network"
PS1='FBI+($debian_chroot)}\u@\h:\w\\$ '
}
function c_f2i() {
        fP=$1
        printf '%.0f\n' $fP
}
function mult1000 () {
    local floor=${1%.*}
    [[ $floor = "0" ]] && floor=''
    local frac='0000'
    [[ $floor != $1 ]] && frac=${1#*.}$frac
    echo ${floor}${frac:0:3}
}
function convertFpToBase10() {
        fP=$1
        printf '%.0f\n' $fP

}
   
